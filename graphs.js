//trees -> special type of a graph
//implement a graph using an adjacency list
//traverse through a graph using BFS and DFS
    //A GRAPH IS A COLLECTION OF NODES AND CONNECTIONS BETWEEN THOSE NODES
    //NODES AND CONNECTIONS
    //


//USES - VERY COOL
    //SOCIAL NETWORKS - 
    //GOOGLE MAPS
    //RECOMMENDATIONS (SPOTIFY, NETFLIX, ETC.)

//vertex (node)
//edge (connection between two nodes)

//DIFF FROM TREES
    //TREES CAN ONLY HAVE ONE CONNECTION BETWEEN A PAIR OF NODE
    //GRAPHS CAN HAVE MANY

//DIRECTED - ARROWS ... DIRECTION/POLARITY... DEAD ENDS.. THERE IS A DIRECTION TO THE RELATIONSHIPS... (I.E. INSTAGRAM, YOU ONLY SEE PEOPLE'S CONTENT WHOM YOU FOLLOW.. DIRECTIONAL RELATIONSHIPS)
//UNDIRECTED - NO DIRECTION. NO POLARITY... THE CONNECTIONS ARE TWO-WAY (A IS CONNECTED TO B, B IS CONNECTED TO A... NO DIRECTION ESTABLISHED) -> CAN TRAVERSE GOING EITHER WAY

//WEIGHTED - THE EDGES (CONNECTIONS) HAVE A VALUE ASSOCIATED WITH THEM (I.E. GOOGLE MAPS. NEED TO KNOW DISTANCES OF THE EDGES FOR EXAMPLE... IF ONE WAY, THEN DIRECTED ... TRACK HOW MANY TIMES SOMEONE LIKES ANOTHER PERSON ON THE EDGE OF THEIR RELATIONSHIP IN INSTAGRAM)
//UNWEIGHTER - NO VALUES TO THE EDGES
